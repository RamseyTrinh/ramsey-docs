{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Ramsey Docs","text":"<p>Hi guys!</p> <p>Documentation is one of the most important steps when learning or working.</p> <p></p> <p>Contact:</p> <ul> <li> <p>Phone number: 0394836338</p> </li> <li> <p>Email: hoangkmhd190@gmail.com</p> </li> </ul> <p> </p> <p> </p>"},{"location":"Docker/","title":"Docker cheat sheet","text":""},{"location":"Docker/#docker-version","title":"Docker version","text":"<pre><code>$ docker version\n</code></pre>"},{"location":"Docker/#show-info","title":"Show info","text":"<pre><code>$ docker info\n</code></pre>"},{"location":"Docker/#some-flag-in-command","title":"Some flag in command","text":"<pre><code>-d: run in \"detached\" mode\n-i: keep STDIN open \n-t: allocate a terminal interating with container\n-it: access terminal\n--name: name\n-p: map ports\n--rm: remove the container when it exits.\n-v: mout a volume\n--network: specify the network (Default: bridge)\n-e: environment variables\n--link: link to another running container\n--restart: set the restart policy\n</code></pre>"},{"location":"Docker/#images-commands","title":"Images commands","text":""},{"location":"Docker/#list-images","title":"List images","text":"<pre><code>$ docker image ls\nor\n$ docker images\n</code></pre>"},{"location":"Docker/#pull-down-images","title":"Pull down images","text":"<pre><code>$ docker pull [IMAGE]\n</code></pre>"},{"location":"Docker/#remove-image","title":"Remove image","text":"<pre><code>$ docker image rm [IMAGE]\n$ docker rmi [IMAGE]\n</code></pre>"},{"location":"Docker/#remove-all-images","title":"Remove all images","text":"<pre><code>$ docker rmi $(docker images -a -q)\n</code></pre>"},{"location":"Docker/#some-sample-container-creation","title":"Some sample container creation","text":"<p>NGINX:</p> <pre><code>$ docker container run -d -p 80:80 --name nginx nginx\n</code></pre> <p>APACHE:</p> <pre><code>$ docker container run -d -p 8080:80 --name apache httpd\n</code></pre> <p>MONGODB:</p> <pre><code>$ docker container run -d -p 27017:27017 --name mongo mongo\n</code></pre> <p>MYSQL:</p> <pre><code>$ docker container run -d -p 3306:3306 --name mysql --env MYSQL_ROOT_PASSWORD=123456 mysql\n</code></pre>"},{"location":"Docker/#containers-commands","title":"Containers commands","text":""},{"location":"Docker/#create-and-run","title":"Create and run","text":"<pre><code>$ docker container run -it -p 80:80 nginx\n</code></pre>"},{"location":"Docker/#list-running","title":"List running","text":"<pre><code>$ docker ps\n</code></pre>"},{"location":"Docker/#list-all","title":"List all","text":"<pre><code>$ docker ps -a\n</code></pre>"},{"location":"Docker/#stop","title":"Stop","text":"<pre><code>$ docker container stop []\n</code></pre>"},{"location":"Docker/#stop-all-running","title":"Stop all running","text":"<pre><code>$ docker stop $(docker ps -aq)\n</code></pre>"},{"location":"Docker/#force-remove","title":"Force remove","text":"<pre><code>$ docker container rm -f [ID]\n</code></pre>"},{"location":"Docker/#remove-multiple","title":"Remove multiple","text":"<pre><code>$ docker container rm [ID] [ID] [ID]\n</code></pre>"},{"location":"Docker/#remove-all","title":"Remove all","text":"<pre><code>$ docker rm $(docker ps -aq)\n</code></pre>"},{"location":"Docker/#get-logs-use-name-or-id","title":"Get logs (Use name or ID)","text":"<pre><code>$ docker container logs [NAME]\n</code></pre>"},{"location":"Docker/#tip-about-containers","title":"TIP: About containers","text":"<p>Docker containers are often compared to virtual machines but they are actually just processes running on your host os. In Windows/Mac, Docker runs in a mini-VM so to see the processes youll need to connect directly to that. On Linux however you can run \"ps aux\" and see the processes directly</p>"},{"location":"Docker/#view-info","title":"View info","text":"<pre><code>$ docker container inspect [NAME]\n</code></pre>"},{"location":"Docker/#performance-stats-info","title":"Performance stats info","text":"<pre><code>$ docker container stats [NAME]\n</code></pre>"},{"location":"Docker/#access-an-already-created","title":"Access an already created","text":"<pre><code>$ docker container start -ai ubuntu\n</code></pre>"},{"location":"Docker/#edit-config","title":"Edit config","text":"<pre><code>$ docker container exec -it mysql bash\n</code></pre>"},{"location":"Docker/#networking","title":"Networking","text":"<p>\"bridge\" or \"docker0\" is the default network</p>"},{"location":"Docker/#get-port","title":"Get port","text":"<pre><code>$ docker container port [NAME]\n</code></pre>"},{"location":"Docker/#list-networks","title":"List networks","text":"<pre><code>$ docker network ls\n</code></pre>"},{"location":"Docker/#inspect-network","title":"Inspect network","text":"<pre><code>$ docker network inspect [NETWORK_NAME]\n(\"bridge\" is default)\n</code></pre>"},{"location":"Docker/#create-network","title":"Create network","text":"<pre><code>$ docker network create [NETWORK_NAME]\n</code></pre> <p>or  <pre><code>$ docker network create --driver bridge [NETWORK_NAME]\n</code></pre></p>"},{"location":"Docker/#connect-existing-container-to-network","title":"Connect existing container to network","text":"<pre><code>$ docker network connect [NETWORK_NAME] [CONTAINER_NAME]\n</code></pre>"},{"location":"Docker/#disconnect-container-from-network","title":"Disconnect container from network","text":"<pre><code>$ docker network disconnect [NETWORK_NAME] [CONTAINER_NAME]\n</code></pre>"},{"location":"Docker/#detach-network-from-container","title":"Detach network from container","text":"<pre><code>$ docker network disconnect\n</code></pre>"},{"location":"Docker/#deleteremove-network","title":"Delete/Remove network","text":"<p>To remove the network by name or id, multiple can be deleted:</p> <pre><code>$ docker network rm [NETWORK_NAME] [NETWORK_NAME]\n</code></pre>"},{"location":"Docker/#image-tagging-push-to-dockerhub","title":"Image tagging &amp; Push to Dockerhub","text":"<pre><code>$ docker image ls\n</code></pre>"},{"location":"Docker/#retag-existing-image","title":"Retag existing image","text":"<pre><code>$ docker image tag nginx btraversy/nginx\n</code></pre>"},{"location":"Docker/#upload-to-dockerhub","title":"Upload to dockerhub","text":"<pre><code>$ docker image push bradtraversy/nginx\n</code></pre>"},{"location":"Docker/#volumes","title":"Volumes","text":"<p>Volume - Makes special location outside of container UFS. Used for databases Bind Mount -Link container path to host path</p>"},{"location":"Docker/#check-volumes","title":"Check volumes","text":"<pre><code>$ docker volume ls\n</code></pre>"},{"location":"Docker/#cleanup-unused-volumes","title":"Cleanup unused volumes","text":"<pre><code>$ docker volume prune\n</code></pre>"},{"location":"Docker/#tip-mounts","title":"TIP: Mounts","text":"<ul> <li>You will also see the volume under mounts</li> <li>Container gets its own uniqe location on the host to store that data</li> <li>Source: xxx is where it lives on the host</li> </ul>"},{"location":"Docker/#check-volumes_1","title":"Check volumes","text":"<pre><code>$ docker volume ls\n</code></pre> <p>There is no way to tell volumes apart for instance with 2 mysql containers, so we used named volumes</p>"},{"location":"Docker/#named-volumes-add-v-command","title":"Named volumes (Add -v command)","text":"<pre><code>$ docker container run -d --name mysql -v mysql-db:/var/lib/mysql mysql\n</code></pre>"},{"location":"Docker/#inspect-new-named-volume","title":"Inspect new named volume","text":"<pre><code>docker volume inspect mysql-db\n</code></pre>"},{"location":"Docker_file/","title":"Dockerfile","text":""},{"location":"Docker_file/#dockerfile-path","title":"Dockerfile path","text":"<ul> <li>FROM - The os used. Common is alpine, debian, ubuntu</li> <li>ENV - Environment variables</li> <li>RUN - Run commands/shell scripts, etc</li> <li>EXPOSE - Ports to expose</li> <li>CMD - Final command run when you launch a new container from image</li> <li>WORKDIR - Sets working directory (also could use 'RUN cd /some/path')</li> <li>COPY # Copies files from host to container</li> </ul>"},{"location":"Docker_file/#build-with-dockerfile","title":"Build with Dockerfile","text":""},{"location":"Docker_file/#from-the-same-directory-as-dockerfile","title":"From the same directory as Dockerfile","text":"<pre><code>$ docker image build -t [REPONAME] .\n</code></pre>"},{"location":"Docker_file/#benchmarking-builds","title":"Benchmarking builds","text":"<pre><code>$ DOCKER_BUILDKIT=1 docker image build -t [REPONAME] .\n</code></pre>"},{"location":"Docker_file/#tip-cache-and-order","title":"Tip: Cache and Order","text":"<ul> <li>If you re-run the build, it will be quick because everythging is cached.</li> <li>If you change one line and re-run, that line and everything after will not be cached</li> <li>Keep things that change the most toward the bottom of the Dockerfile</li> </ul>"},{"location":"Docker_file/#usual-step","title":"Usual step","text":"<p>Build image from Dockerfile</p> <p><pre><code>$ docker image build -t nginx\n</code></pre> Running it</p> <p><pre><code>$ docker container run -p 80:80 --rm nginx\n</code></pre> Tag </p> <p><pre><code>$ docker image tag nginx:latest ramseytrinh/nginx:latest\n</code></pre> Push to Dockerhub <pre><code>$ docker image push ramseytrinh/nginx:latest\n</code></pre></p>"},{"location":"Docker_file/#docker-compose","title":"DOCKER COMPOSE","text":"<ul> <li>Configure relationships between containers</li> <li>Save our docker container run settings in easy to read file</li> </ul>"},{"location":"Docker_file/#sample-compose-file","title":"Sample compose file","text":"<pre><code>version: '2'\n\n# same as\n# docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve\n\nservices:\n  jekyll:\n    image: bretfisher/jekyll-serve\n    volumes:\n      - .:/site\n    ports:\n      - '80:4000'\n</code></pre>"},{"location":"Docker_file/#example-2","title":"Example 2","text":"<pre><code>version: '3'\nservices:\n  app:\n    container_name: docker-node-mongo\n    restart: always\n    build: .\n    ports:\n      - '80:3000'\n    links:\n      - mongo\n  mongo:\n    container_name: mongo\n    image: mongo\n    ports:\n      - '27017:27017'\n</code></pre>"},{"location":"Docker_file/#to-run","title":"To run","text":"<pre><code>docker-compose up\n</code></pre>"},{"location":"Docker_file/#you-can-run-in-background-with","title":"You can run in background with","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"Docker_file/#to-cleanup","title":"To cleanup","text":"<pre><code>docker-compose down\n</code></pre>"},{"location":"PITR_Postgresql/","title":"PITR in PostgreSQL","text":""},{"location":"PITR_Postgresql/#link","title":"Link","text":"<p>Link document</p>"},{"location":"PITR_Postgresql/#step-1-sua-config","title":"Step 1: S\u1eeda Config","text":"<p><pre><code>nano /etc/postgresql/17/main/postgresql.conf\n</code></pre> <pre><code>wal_level = replica\narchive_mode = on\narchive_command = 'cp %p /var/lib/postgresql/archive/%f'\n\n# Hai d\u00f2ng cu\u1ed1i n\u00e0y kh\u00f4ng ch\u1eafc l\u00e0 ph\u1ea3i c\u1ea5u h\u00ecnh ngay t\u1eeb \u0111\u00e2y\n# kh\u00f4ng hay l\u00e0 c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u1edf file postgres.auto.conf trong main\nrestore_command = 'cp /var/lib/postgresql/archive/%f %p'\nrecovery_target_time = '2025-03-24 15:10:00'\n</code></pre></p>"},{"location":"PITR_Postgresql/#step-2-backup-base-data","title":"Step 2: Backup base data","text":"<p><pre><code>sudo mkdir -p /var/lib/postgresql/archive\nsudo chown postgres:postgres /var/lib/postgresql/archive\n</code></pre> <pre><code>pg_basebackup -U postgres -D /var/lib/postgresql/backups/base -F tar -X fetch -P\n# Copy c\u1ea3 pg_wal ra \u0111\u1ec3 ph\u00f2ng ng\u1eeba (Tr\u00ean docs h\u01b0\u1edbng d\u1eabn th\u1ebf)\nsudo cp -r /var/lib/postgresql/17/main /var/lib/postgresql/17/main_backup\n\nsudo cp -r /var/lib/postgresql/17/main/pg_wal /var/lib/postgresql/main_backup_pg_wal\n</code></pre></p>"},{"location":"PITR_Postgresql/#step-3-thu-nao","title":"Step 3: Th\u1eed n\u00e0o","text":"<pre><code>sudo systemctl stop postgresql\n</code></pre>"},{"location":"PITR_Postgresql/#xoa-het-trong-main-i-va-cho-lai-data-a-backup-ra-vao","title":"X\u00f3a h\u1ebft trong main \u0111i v\u00e0 cho l\u1ea1i data \u0111\u00e3 backup ra v\u00e0o","text":"<pre><code>sudo rm -rf /var/lib/postgresql/17/main/*\n\ntar -xf /var/lib/postgresql/backups/base/base.tar -C /var/lib/postgresql/17/main\n</code></pre>"},{"location":"PITR_Postgresql/#xoa-wal-cu-va-cho-wal-o-buoc-tren-vao","title":"X\u00f3a WAL c\u0169 v\u00e0 cho WAL \u1edf b\u01b0\u1edbc tr\u00ean v\u00e0o","text":"<pre><code>sudo rm -rf /var/lib/postgresql/17/main/pg_wal/*\n\nsudo cp /var/lib/postgresql/main_backup_pg_wal/* /var/lib/postgresql/17/main/pg_wal/\n</code></pre>"},{"location":"PITR_Postgresql/#tao-recovery-roi-restart-cho-khong-lam-uoc","title":"T\u1ea1o recovery r\u1ed3i restart ch\u1edd kh\u00f4ng l\u00e0m \u0111\u01b0\u1ee3c","text":"<pre><code>sudo touch /var/lib/postgresql/17/main/recovery.signal\n</code></pre>"},{"location":"PITR_Postgresql/#chinh-sua-postgresqlautoconf-e-thiet-lap-pitr-nhung-ma-o-trong-buoc-8-trong-cai-docs-chinh-thuc-thi-no-bat-sua-postgresqlconf-thi-quay-lai-buoc-kia-sua-thoi","title":"Ch\u1ec9nh s\u1eeda <code>postgresql.auto.conf</code> \u0111\u1ec3 thi\u1ebft l\u1eadp PITR nh\u01b0ng m\u00e0 \u1edf trong b\u01b0\u1edbc 8 trong c\u00e1i docs ch\u00ednh th\u1ee9c th\u00ec n\u00f3 b\u1eaft s\u1eeda postgresql.conf, th\u00ec quay l\u1ea1i b\u01b0\u1edbc kia s\u1eeda th\u00f4i","text":"<p>M\u1edf file c\u1ea5u h\u00ecnh: <pre><code>sudo nano /var/lib/postgresql/17/main/postgresql.auto.conf\n</code></pre> Th\u00eam c\u00e1c d\u00f2ng sau: <pre><code>restore_command = 'cp /var/lib/postgresql/archive/%f %p'\nrecovery_target_time = '2025-03-24 20:12:09+07'\n</code></pre></p>"},{"location":"PITR_Postgresql/#debug","title":"Debug","text":"<pre><code>tail -f /var/log/postgresql/postgresql-17-main.log\n\njournalctl -u postgresql --no-pager -n 50\n</code></pre> <p>Ch\u1ea1y l\u1ec7nh ki\u1ec3m tra th\u1eddi gian kh\u00f4i ph\u1ee5c: <pre><code>SELECT pg_wal_replay_resume();\nSELECT now();\n</code></pre></p>"},{"location":"Terraform/","title":"Terraform","text":"<p>N\u1ebfu b\u1ea1n c\u1ea7n l\u01b0u l\u1ea1i k\u1ebft qu\u1ea3 c\u1ee7a c\u00e2u l\u1ec7nh plan, b\u1ea1n s\u1eed d\u1ee5ng th\u00eam -out option khi ch\u1ea1y. V\u00ed d\u1ee5 ta s\u1ebd save l\u1ea1i k\u1ebft qu\u1ea3 c\u1ee7a c\u00e2u l\u1ec7nh plan trong file json. <pre><code>$ terraform plan -out plan.out\n$ terraform show -json plan.out &gt; plan.json\n</code></pre></p> <pre><code>terraform apply -auto-approve\n</code></pre> <p>Ta c\u00f3 th\u1ec3 ch\u1ea1y c\u00e2u l\u1ec7nh plan tr\u01b0\u1edbc, v\u1edbi -out option, \u0111\u1ec3 review resource, sau \u0111\u00f3 ta s\u1ebd ch\u1ea1y c\u00e2u l\u1ec7nh apply v\u1edbi k\u1ebft qu\u1ea3 c\u1ee7a plan tr\u01b0\u1edbc \u0111\u00f3, nh\u01b0 sau:</p> <p>\u0110\u1ea7u ti\u00ean l\u00e0 s\u1ebd ch\u1ea1y job \u0111\u1ec3 ki\u1ec3m tra resource. <pre><code>terraform plan -out plan.out\n</code></pre></p> <p>N\u1ebfu m\u1ecdi th\u1ee9 ok th\u00ec job tr\u00ean s\u1ebd pass v\u00e0 ti\u1ebfp theo ta s\u1ebd ch\u1ea1y job \u0111\u1ec3 t\u1ea1o resource. <pre><code>terraform apply \"plan.out\"\n</code></pre></p>"},{"location":"Terraform/#data-block","title":"Data block","text":"<p>B\u00ean c\u1ea1nh vi\u1ec7c ta s\u1eed d\u1ee5ng resource block \u0111\u1ec3 t\u1ea1o resource, th\u00ec terraform c\u00f3 cung c\u1ea5p cho ta m\u1ed9t block kh\u00e1c d\u00f9ng \u0111\u1ec3 queries v\u00e0 t\u00ecm ki\u1ebfm data tr\u00ean AWS, block n\u00e0y s\u1ebd gi\u00fap ta t\u1ea1o resource m\u1ed9t c\u00e1ch linh ho\u1ea1t h\u01a1n l\u00e0 ph\u1ea3i \u0111i\u1ec1n c\u1ee9ng gi\u00e1 tr\u1ecb c\u1ee7a resource. V\u00ed d\u1ee5 nh\u01b0 \u1edf tr\u00ean th\u00ec tr\u01b0\u1eddng ami c\u1ee7a EC2 ta fix gi\u00e1 tr\u1ecb l\u00e0 ami-09dd2e08d601bff67, \u0111\u1ec3 bi\u1ebft \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb n\u00e0y th\u00ec ta ph\u1ea3i l\u00ean AWS \u0111\u1ec3 ki\u1ebfm, v\u1edbi l\u1ea1i n\u1ebfu ta d\u00f9ng gi\u00e1 tr\u1ecb n\u00e0y th\u00ec ng\u01b0\u1eddi kh\u00e1c \u0111\u1ecdc c\u0169ng kh\u00f4ng bi\u1ebft \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb n\u00e0y l\u00e0 thu\u1ed9c ami lo\u1ea1i g\u00ec.</p>"},{"location":"Terraform/#resource-drift","title":"Resource drift","text":"<p>Resource drift l\u00e0 v\u1ea5n \u0111\u1ec1 khi config resource c\u1ee7a ta b\u1ecb thay \u0111\u1ed5i b\u00ean ngo\u00e0i terraform, v\u1edbi AWS th\u00ec c\u00f3 th\u1ec3 l\u00e0 do ai \u0111\u00f3 d\u00f9ng Web Console c\u1ee7a AWS \u0111\u1ec3 thay \u0111\u1ed5i config g\u00ec \u0111\u00f3 c\u1ee7a resource m\u00e0 \u0111\u01b0\u1ee3c ta deploy b\u1eb1ng terraform</p>"},{"location":"Terraform/#variable","title":"Variable","text":"<p>Ta s\u1ebd d\u00f9ng variable block \u0111\u1ec3 khai b\u00e1o variable, v\u00e0 theo sau n\u00f3 l\u00e0 t\u00ean c\u1ee7a variable \u0111\u00f3. \u1ede v\u00ed d\u1ee5 tr\u00ean, ta t\u1ea1o th\u00eam m\u1ed9t file n\u1eefa v\u1edbi t\u00ean l\u00e0 variable.tf (n\u00e0y b\u1ea1n \u0111\u1eb7t t\u00ean g\u00ec c\u0169ng \u0111\u01b0\u1ee3c nha) \u0111\u1ec3 khai b\u00e1o bi\u1ebfn c\u1ee7a ta. <pre><code>variable \"instance_type\" {\n  type = string\n  description = \"Instance type of the EC2\"\n}\n</code></pre> Thu\u1ed9c t\u00ednh l\u00e0 type \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh type c\u1ee7a bi\u1ebfn \u0111\u00f3, thu\u1ed9c t\u00ednh description d\u00f9ng \u0111\u1ec3 ghi l\u1ea1i m\u00f4 t\u1ea3 cho ng\u01b0\u1eddi \u0111\u1ecdc bi\u1ebfn \u0111\u00f3 c\u00f3 \u00fd ngh\u0129a g\u00ec. Ch\u1ec9 c\u00f3 thu\u1ed9c t\u00ednh type l\u00e0 b\u1eaft bu\u1ed9c ph\u1ea3i khai b\u00e1o. Trong terraform th\u00ec m\u1ed9t bi\u1ebfn s\u1ebd c\u00f3 c\u00e1c type sau \u0111\u00e2y:</p> <p>G\u00e1n gi\u00e1 tr\u1ecb cho variable \u0110\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn, ta s\u1ebd t\u1ea1o m\u1ed9t file t\u00ean l\u00e0 terraform.tfvars <pre><code>instance_type = \"t2.micro\"\n</code></pre> Khi ta ch\u1ea1y terraform apply th\u00ec file terraform.tfvars s\u1ebd \u0111\u01b0\u1ee3c terraform s\u1eed d\u1ee5ng m\u1eb7c \u0111\u1ecbnh \u0111\u1ec3 load gi\u00e1 tr\u1ecb cho bi\u1ebfn, n\u1ebfu ta kh\u00f4ng mu\u1ed1n d\u00f9ng m\u1eb7c \u0111\u1ecbnh, th\u00ec khi ch\u1ea1y c\u00e2u l\u1ec7nh apply ta th\u00eam v\u00e0o option l\u00e0 -var-file n\u1eefa. T\u1ea1o m\u1ed9t file t\u00ean l\u00e0 production.tfvars</p>"},{"location":"Terraform/#output","title":"Output","text":"<p>Th\u00f4ng th\u01b0\u1eddng khi t\u1ea1o EC2 xong, ta s\u1ebd mu\u1ed1n xem \u0111\u1ecba ch\u1ec9 IP c\u1ee7a n\u00f3, \u0111\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c vi\u1ec7c \u0111\u00f3 th\u00ec ta s\u1eed d\u1ee5ng output block. \u0110\u1ec3 in \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb public IP c\u1ee7a EC2, ta th\u00eam v\u00e0o file main.tf \u0111o\u1ea1n code sau: <pre><code>...\n\noutput \"ec2\" {\n  value = {\n    public_ip = aws_instance.hello.public_ip\n  }\n}\n</code></pre></p>"},{"location":"Terraform/#count-parameter","title":"Count parameter","text":"<p>M\u1ecdi th\u1ee9 \u0111\u1ec1u kh\u00f4ng c\u00f3 g\u00ec ph\u1ee9c t\u1ea1p h\u1ebft, nh\u01b0ng n\u1ebfu gi\u1edd ta mu\u1ed1n 100 con EC2 th\u00ec sao? Ta c\u00f3 th\u1ec3 copy ra 100 resource block, nh\u01b0ng kh\u00f4ng ai l\u00e0m v\u1eady \ud83d\ude02, m\u00e0 ta s\u1ebd s\u1eed d\u1ee5ng count parameter.</p> <p>Count l\u00e0 m\u1ed9t meta argument, l\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh trong terraform ch\u1ee9 kh\u00f4ng ph\u1ea3i c\u1ee7a resource type thu\u1ed9c provider, \u1edf b\u00e0i 1 ta \u0111\u00e3 n\u00f3i resource type block ch\u1ec9 c\u00f3 ch\u1ee9a c\u00e1c thu\u1ed9c t\u00ednh m\u00e0 provider cung c\u1ea5p cho, c\u00f2n meta argument l\u00e0 thu\u1ed9c t\u00ednh c\u1ee7a terraform =&gt; ngh\u0129a l\u00e0 ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng n\u00f3 \u1edf b\u1ea5t k\u00ec resource block n\u00e0o. C\u1eadp nh\u1eadt l\u1ea1i file main.tf m\u00e0 s\u1ebd t\u1ea1o ra 5 EC2 nh\u01b0 sau: <pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n}\n\ndata \"aws_ami\" \"ubuntu\" {\n  most_recent = true\n\n  filter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"]\n  }\n\n  owners = [\"099720109477\"]\n}\n\nresource \"aws_instance\" \"hello\" {\n  count         = 5\n  ami           = data.aws_ami.ubuntu.id\n  instance_type = var.instance_type\n}\n\noutput \"ec2\" {\n  value = {\n    public_ip1 = aws_instance.hello[0].public_ip\n    public_ip2 = aws_instance.hello[1].public_ip\n    public_ip3 = aws_instance.hello[2].public_ip\n    public_ip4 = aws_instance.hello[3].public_ip\n    public_ip5 = aws_instance.hello[4].public_ip\n  }\n}\n</code></pre></p> <p>B\u00e2y gi\u1edd ta \u0111\u00e3 gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 copy resource ra khi c\u1ea7n t\u1ea1o n\u00f3 v\u1edbi s\u1ed1 l\u01b0\u1ee3ng nhi\u1ec1u h\u01a1n, nh\u01b0ng \u1edf ph\u1ea7n output, ta v\u1eabn ph\u1ea3i ghi ra t\u1eebng resource ri\u00eang l\u1ebb. Ta s\u1ebd gi\u1ea3i quy\u1ebft n\u00f3 b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng for expressions.</p>"},{"location":"Terraform/#for-expressions","title":"For expressions","text":"<pre><code>output \"ec2\" {\n  value = {\n    public_ip = [ for v in aws_instance.hello : v.public_ip ]\n  }\n}\n</code></pre>"},{"location":"Terraform/#upload-file-to-s3-aws","title":"Upload file to S3 aws","text":"<pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_s3_bucket\" \"static\" {\n  bucket = \"terraform-series-bai3\"\n  acl    = \"public-read\"\n  policy = file(\"s3_static_policy.json\")\n\n  website {\n    index_document = \"index.html\"\n    error_document = \"error.html\"\n  }\n}\n\nlocals {\n  mime_types = {\n    html  = \"text/html\"\n    css   = \"text/css\"\n    ttf   = \"font/ttf\"\n    woff  = \"font/woff\"\n    woff2 = \"font/woff2\"\n    js    = \"application/javascript\"\n    map   = \"application/javascript\"\n    json  = \"application/json\"\n    jpg   = \"image/jpeg\"\n    png   = \"image/png\"\n    svg   = \"image/svg+xml\"\n    eot   = \"application/vnd.ms-fontobject\"\n  }\n}\n\nresource \"aws_s3_bucket_object\" \"object\" {\n  for_each = fileset(path.module, \"static-web/**/*\")\n  bucket = aws_s3_bucket.static.id\n  key    = replace(each.value, \"static-web\", \"\")\n  source = each.value\n  etag         = filemd5(\"${each.value}\")\n  content_type = lookup(local.mime_types, split(\".\", each.value)[length(split(\".\", each.value)) - 1])\n}\n</code></pre>"},{"location":"Terraform/#local-values","title":"Local values","text":"<p>\u0110\u00e2y l\u00e0 block gi\u00fap ta khai b\u00e1o m\u1ed9t gi\u00e1 tr\u1ecb local trong file terraform v\u00e0 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng l\u1ea1i \u0111\u01b0\u1ee3c nhi\u1ec1u l\u1ea7n \u0110\u1ec3 truy c\u1eadp gi\u00e1 tr\u1ecb local th\u00ec ta d\u00f9ng c\u00fa ph\u00e1p local."}]}